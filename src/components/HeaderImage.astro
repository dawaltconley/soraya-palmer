---
import Header from './Header.astro'
import BackgroundImage from './BackgroundImage.astro'

export interface Props {
  image: string
  class?: string
  imagePosition?: [number | null, number | null]
}

const {
  image,
  class: className,
  imagePosition: [posX, posY] = [],
} = Astro.props

const backgroundImage = await Astro.slots.render('background-image')
---

<div
  class:list={[
    className,
    'vignette relative flex h-[40vh] w-full flex-col bg-gray-900/30',
  ]}
>
  {
    backgroundImage ? (
      <Fragment set:html={backgroundImage} />
    ) : (
      <div
        class="bg-img-header absolute inset-0 -z-10"
        style={{
          '--background-position-x': posX,
          '--background-position-y': posY,
        }}
      />
    )
  }
  <div class="relative z-50">
    <Header textColor="white" class="sm:text-shadow" />
  </div>
  {
    Astro.slots.has('default') && (
      <div class="container mx-auto mb-8 mt-auto">
        <h1 class="separator text-shadow heading-1 mb-8 text-white">
          <slot />
        </h1>
      </div>
    )
  }
  <BackgroundImage selector=".bg-img-header" src={image} formats={['webp']} />
</div>

<style lang="scss" is:global>
  .bg-img-header {
    background-position: center;
    background-position-x: calc(1% * var(--background-position-x, 50));
    background-position-y: calc(1% * var(--background-position-y, 50));
    background-size: cover;
    background-repeat: no-repeat;
    filter: contrast(70%);
  }
</style>
